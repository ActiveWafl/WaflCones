<?php
namespace WaflCones\DataModel;

use \DblEj\Data\Field;

/**
 * SaleItem
 * Represents a row in the database table SaleItems
 */
abstract class SaleItem
extends \DblEj\Data\PersistableModel
{

    /**
     * SaleItemId
     *
     * Data Storage (DblEj\Data\StorageEngines\Mysql): 
     *        Primary Key
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_saleItemId;

    /**
     * SaleId
     *
     * Data Storage (DblEj\Data\StorageEngines\Mysql): 
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_saleId;

    /**
     * FlavorId
     *
     * Data Storage (DblEj\Data\StorageEngines\Mysql): 
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_flavorId;

    /**
     * Ounces
     *
     * Data Storage (DblEj\Data\StorageEngines\Mysql): 
     *        Type: DATA_TYPE_DECIMAL
     *        Default: null
     *
     * @var float
     */
    protected $_ounces;

    /**
     * Price
     *
     * Data Storage (DblEj\Data\StorageEngines\Mysql): 
     *        Type: DATA_TYPE_DECIMAL
     *        Default: null
     *
     * @var float
     */
    protected $_price;
    /**
     * Get_FieldDataTypes
     *
     * Get an array of this model's fields and their data types
     *
     */
    public static function GetFieldDataTypes()
    {
        $fieldTypes = array();
                $fieldTypes["SaleItemId"] = Field::DATA_TYPE_INT;
        $fieldTypes["SaleId"] = Field::DATA_TYPE_INT;
        $fieldTypes["FlavorId"] = Field::DATA_TYPE_INT;
        $fieldTypes["Ounces"] = Field::DATA_TYPE_DECIMAL;
        $fieldTypes["Price"] = Field::DATA_TYPE_DECIMAL;
        return $fieldTypes;
    }

    /**
     * Search
     *
     * Search an index for the given criteria and return matching SaleItems.
     * An "index" in this context refers to an implementor of IIndex and is generated by an IIndexer (such as the Apache Solr Indexer Extension).
     *
     * @param string $searchFieldName The name of the INDEX FIELD (not necessarily the same as the model or table's field) to search on.
     * @param string $searchValue The indexed value to search for.
     * @param \DblEj\Data\IndexSort[] $sorts How to sort the results.
     * @param \DblEj\Data\IIndex $searchIndex Which index to seach.  If not provided, the default search index will be used.
     * @return \WaflCones\FunctionalModel\SaleItem[]
     * @throws \Exception
     */
    public static function Search($searchFieldName, $searchValue, $sorts = null, \DblEj\Data\IIndex $searchIndex = null)
    {
        self::Initialize();
        return self::_search($searchFieldName, $searchValue, $sorts, $searchIndex);
    }

    /**
     * Filter
     *
     * Get the SaleItem's from the Storage Engine that matches the given filter and other criteria.
     *
     * @param string $filter optional The filter to filter by.  If no filter is passed in, then all results are returned.
     * @param string $orderByFieldName optional The name of the field to order the SaleItem's by
     * @param int $maxRecordCount optional The maximum number of SaleItem's to return
     * @param string $groupingField optional
     * @param array $joinObjects optional The tables and fields to join as part of the search criteria (note: joined columns are not returned as properties of the data model).
     * @param int $startOffset optional
     * @param string $arrayKeyField optional
     * @return \WaflCones\FunctionalModel\SaleItem[] an array of the matching SaleItems
     * @throws DataModelException
     * @throws DataException
     */
    public static function Filter($filter = null, $orderByFieldName = null, $maxRecordCount = null, $groupingField = null,
    $joinObjects = null, $startOffset = 0, $arrayKeyField = null)
    {
        self::Initialize();
        return self::_filter($filter, $orderByFieldName, $maxRecordCount, $groupingField, $joinObjects, $startOffset, $arrayKeyField);
    }

    /**
     * FilterFirst
     *
     * Get the SaleItem's from the Storage Engine that matches the given filter and other criteria.
     *
     * @param string $filter
     * @param string $orderByFieldName
     * @param string $groupingField
     * @param array $joinObjects
     * @return null|\WaflCones\FunctionalModel\SaleItem the first matching SaleItems
     * @throws DataModelException
     */
    public static function FilterFirst($filter = null, $orderByFieldName = null, $groupingField = null, $joinObjects = null)
    {
        self::Initialize();
        return self::_filterFirst($filter, $orderByFieldName, $groupingField, $joinObjects);
    }


    /**
     * Get the current SaleItemId for this SaleItem.
     *
     * @return integer The SaleItemId
     */
    public function Get_SaleItemId()
    {
        return $this->_saleItemId;
    }

    /**
     * Set the SaleItemId for this SaleItem
     *
     * @return \WaflCones\FunctionalModel\SaleItem This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_SaleItemId($saleItemId)
    {
        if ($this->_saleItemId !== $saleItemId)
        {
            $this->_saleItemId = $saleItemId;
            $this->ModelChanged("SaleItemId");
        }
        return $this;
    }


    /**
     * Get the current SaleId for this SaleItem.
     *
     * @return integer The SaleId
     */
    public function Get_SaleId()
    {
        return $this->_saleId;
    }

    /**
     * Set the SaleId for this SaleItem
     *
     * @return \WaflCones\FunctionalModel\SaleItem This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_SaleId($saleId)
    {
        if ($this->_saleId !== $saleId)
        {
            $this->_saleId = $saleId;
            $this->ModelChanged("SaleId");
        }
        return $this;
    }


    /**
     * Get the current FlavorId for this SaleItem.
     *
     * @return integer The FlavorId
     */
    public function Get_FlavorId()
    {
        return $this->_flavorId;
    }

    /**
     * Set the FlavorId for this SaleItem
     *
     * @return \WaflCones\FunctionalModel\SaleItem This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_FlavorId($flavorId)
    {
        if ($this->_flavorId !== $flavorId)
        {
            $this->_flavorId = $flavorId;
            $this->ModelChanged("FlavorId");
        }
        return $this;
    }


    /**
     * Get the current Ounces for this SaleItem.
     *
     * @return float The Ounces
     */
    public function Get_Ounces()
    {
        return $this->_ounces;
    }

    /**
     * Set the Ounces for this SaleItem
     *
     * @return \WaflCones\FunctionalModel\SaleItem This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_Ounces($ounces)
    {
        if ($this->_ounces !== $ounces)
        {
            $this->_ounces = $ounces;
            $this->ModelChanged("Ounces");
        }
        return $this;
    }


    /**
     * Get the current Price for this SaleItem.
     *
     * @return float The Price
     */
    public function Get_Price()
    {
        return $this->_price;
    }

    /**
     * Set the Price for this SaleItem
     *
     * @return \WaflCones\FunctionalModel\SaleItem This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_Price($price)
    {
        if ($this->_price !== $price)
        {
            $this->_price = $price;
            $this->ModelChanged("Price");
        }
        return $this;
    }

    /**
    * Get the related Flavor
    *
    * @return \WaflCones\FunctionalModel\Flavor The Flavor
    */
    public function GetFlavor($sortBy = null)
    {
        return \WaflCones\FunctionalModel\Flavor::SelectFirst("FlavorId = '".$this->Get_FlavorId()."'", $sortBy);
    }

    /**
    * Get the related Sale
    *
    * @return \WaflCones\FunctionalModel\Sale The Sale
    */
    public function GetSale($sortBy = null)
    {
        return \WaflCones\FunctionalModel\Sale::SelectFirst("SaleId = '".$this->Get_SaleId()."'", $sortBy);
    }

    /**
    * Gets the name of the field that stores a unique key identifying each instance.
    * This is often the primary key in your database table.
    *
    * @return string
    */
    public static function Get_KeyFieldName()
    {
        return "SaleItemId";
    }

    /**
    * Whether or not the values in the KeyField are generated automatically (like a database auto-increment) or if they generated manually.
    *
    * @return boolean TRUE if the values are generated automatically by the engine, otherwise FALSE
    */
    public static function Get_KeyIsAutoGenerated()
    {
        return true;
    }

    /**
    * A Storage Engine specific string that tells the Storage Engine where this Model is to be stored.
    * This is typically the name of a database table.
    *
    * @return string
    */
    public static function Get_Destination()
    {
        return "SaleItems";
    }

    /**
    * An arbitrary logical grouping for objects that can be stored in a storage engine.
    * If you have a Storage Engine set up with the same Storage Group, then ActiveWafl will use that storage engine when retrieving and persisting models of this type.
    * @return string
    */
    public static function Get_StorageGroup()
    {
        return "WaflCones";
    }
}